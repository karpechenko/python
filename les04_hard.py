# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
# matrix = [[1, 0, 8],
#           [3, 4, 1],
#           [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]

matrix_rotate = [print(line) for line in list(map(list, zip(*matrix)))]


# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

import re

def mult(string):
    result = 1
    for i in string:
        result = result * int(i)
    return result
    
div_list = re.findall(r'[0-9]{5}', number)
mult_list = list(map(mult, div_list))
max_num = max(mult_list)
num_index = mult_list.index(max_num)
print('Максимальное произведение: ', max_num, ' ', 'Индекс смещения: ', num_index * 5 + num_index // 10 + 1)


# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

import random

def line_sum(matrix):
    k = 0
    for i in matrix:
        if sum(i) != 1:
            break
        else:
            k += 1
    return k

def diag_sum(m):    
    diag = [m[7][0], m[6][1], m[5][2], m[4][3], m[3][4], m[2][5], m[1][6], m[0][7]]
    s = 0
    if sum(diag) > 1:
        return 'NO'
    else:
        i = 6
        while i != 0:
            k = 0
            diag.pop()
            for _ in diag:
                diag[k] = m[i - k][k]
                k += 1
            i -= 1
            if sum(diag) > 1:
                return 'NO'
                break
            else:
                s += 1
    return s

# coordinate = [[random.randint(0, 7) for _ in range(2)] for _ in range(8)]
coordinate = [[0, 6], [1, 3], [2, 1], [3, 7], [4, 5], [5, 0], [6, 2], [7, 4]]
matrix = [[ 0 for _ in range(8)] for _ in range(8)]

for i in coordinate:
    matrix[i[0]].pop(i[1])
    matrix[i[0]].insert(i[1], 1)

if line_sum(matrix) == 8:
    rotate_matrix = [line for line in list(map(list, zip(*matrix)))]
    if line_sum(rotate_matrix) == 8:
        if diag_sum(matrix) == 6:
            matrix.reverse()
            if diag_sum(matrix) == 6:
                rotate_matrix.reverse()
                if diag_sum(rotate_matrix) == 6:
                     print('YES')
else:
    print('NO')
